"0",""
"0","#1.Initialize an empty data frame to store the results"
"0","result_df <- data.frame("
"0","  participantno = numeric(),"
"0","  scenario = numeric(),"
"0","  startpoint = character(),"
"0","  lg_1 = numeric(),"
"0","  lg_2 = numeric(),"
"0","  lg_3 = numeric(),"
"0","  lg_4 = numeric(),"
"0","  duration_1 = numeric(),"
"0","  duration_2 = numeric(),"
"0","  duration_3 = numeric(),"
"0","  duration_4 = numeric(),"
"0","  total_length = numeric(),"
"0","  total_duration = numeric(),"
"0","  total_speed = numeric(),"
"0","  num_stops_1 = numeric(),  "
"0","  num_stops_2 = numeric(),  "
"0","  num_stops_3 = numeric(),  "
"0","  num_stops_4 = numeric(),"
"0","  stops_duration_1 = numeric(),  "
"0","  stops_duration_2 = numeric(),   "
"0","  stops_duration_3 = numeric(),    "
"0","  stops_duration_4 = numeric(),  "
"0","  total_walkingstops = numeric(),"
"0","  stringsAsFactors = FALSE"
"0",")"
"0",""
"0","#2.Use a loop to go through each CSV file"
"0","setwd(""workfiles"") "
"2","Warning: The working directory was changed to D:/GIVA/project/cave_context_aware_mobile_maps/trajectory_analysis/workfiles inside a notebook chunk. The working directory will be reset when the chunk is finished running. Use the knitr root.dir option in the setup chunk to change the working directory for notebook chunks."
"0","csv_files <- list.files(pattern=""\\.csv$"", full.names=TRUE) "
"0",""
"0","for (csv_file in csv_files) {"
"0","  df <- read.csv(csv_file, sep = "";"", header = TRUE)"
"0","  df$posX <- as.numeric(df$posX)"
"0","  df$posZ <- as.numeric(df$posZ)"
"0",""
"0","  #3.Initialize new vectors to store length, time, stops, stop time"
"0","  trajectory_lengths <- numeric()"
"0","  trajectory_durations <- numeric()"
"0","  num_stops <- numeric()"
"0","  trajectory_stops_durations <- numeric()"
"0","  "
"0","  #4.Identify the indices of taskAccepted and checkedIn points"
"0","  task_accepted_indices <- which(df$taskState == ""taskAccepted"")"
"0","  checked_in_indices <- which(grepl(""checkedIn:"", df$taskState))"
"0",""
"0","  for (i in seq_along(task_accepted_indices)) {"
"0","    start_index <- task_accepted_indices[i]"
"0","    end_index <- checked_in_indices[i]"
"0","    trajectory_subset <- df[start_index:end_index, c(""posX"", ""posZ"", ""DateTime"")]"
"0","    "
"0","    #5.Calculate length."
"0","      #Euclidean distances between consecutive points in the trajectory"
"0","    distances <- sqrt(diff(trajectory_subset$posX)^2 + diff(trajectory_subset$posZ)^2)"
"0","    trajectory_length <- sum(distances)"
"0","    trajectory_lengths <- c(trajectory_lengths, trajectory_length)"
"0","  "
"0","    #6.Calculate time."
"0","      #Time duration of the trajectory in seconds"
"0","    start_time <- as.POSIXct(trajectory_subset$DateTime[1], format=""%Y-%m-%d %H:%M:%S"")"
"0","    end_time <- as.POSIXct(trajectory_subset$DateTime[nrow(trajectory_subset)], format=""%Y-%m-%d %H:%M:%S"")"
"0","    trajectory_duration <- as.numeric(difftime(end_time, start_time, units = ""secs""))"
"0","    trajectory_durations <- c(trajectory_durations, trajectory_duration)"
"0","    "
"0","    #7.Calculate walking stops."
"0","      #Count the number of walking stops"
"0","      #duplicated(trajectory_subset[c(""posX"", ""posZ"")]. It is TRUE for rows that have duplicated values"
"0","      #!duplicated(trajectory_subset[c(""posX"", ""posZ"")], fromLast = TRUE) It is TRUE for the last occurrence of each set of duplicated values and FALSE otherwise. The fromLast = TRUE argument ensures that the last occurrence is marked as TRUE."
"0","    num_stops_in_trajectory <- sum(duplicated(trajectory_subset[c(""posX"", ""posZ"")]) & !duplicated(trajectory_subset[c(""posX"", ""posZ"")], fromLast = TRUE))"
"0","    num_stops <- c(num_stops, num_stops_in_trajectory)"
"0","    "
"0",""
"0","    #8.Calculate walking stop time."
"0","      # Identify the indices of walking stops"
"0","    stop_indices <- which(duplicated(trajectory_subset[c(""posX"", ""posZ"")]) & !duplicated(trajectory_subset[c(""posX"", ""posZ"")], fromLast = TRUE))"
"0","      # Calculate the duration of each stop"
"0","    stop_durations <- numeric()"
"0","    for (stop_index in stop_indices) {"
"0","      # Find the start index for the current stop"
"0","      start_index <- match(TRUE, trajectory_subset$posX[stop_index] == trajectory_subset$posX & trajectory_subset$posZ[stop_index] == trajectory_subset$posZ)"
"0","      stop_start_time <- as.POSIXct(trajectory_subset$DateTime[start_index], format=""%Y-%m-%d %H:%M:%OS"")"
"0","      stop_end_time <- as.POSIXct(trajectory_subset$DateTime[stop_index], format=""%Y-%m-%d %H:%M:%OS"")"
"0","      stop_duration <- as.numeric(difftime(stop_end_time, stop_start_time, units = ""secs""))"
"0","      stop_durations <- c(stop_durations, stop_duration)"
"0","    }"
"0","  "
"0","    # Sum the durations to get the total stops duration for the trajectory"
"0","    trajectory_stops_duration <- sum(stop_durations)"
"0","    trajectory_stops_duration <- round(trajectory_stops_duration, 3)"
"0","    # Append the stops duration to the vector"
"0","    trajectory_stops_durations <- c(trajectory_stops_durations, trajectory_stops_duration)"
"0","    "
"0","    }"
"0",""
"0","  #9.Extract the participant information from file name"
"0","  file_parts <- unlist(strsplit(csv_file, ""_""))"
"0","  participant_no <- as.numeric(sub(""participant_"", """", file_parts[2]))"
"0","  scenario <- as.numeric(file_parts[4])"
"0","  start_point <- substr(file_parts[5], 1, 1)"
"0",""
"0","  #10.Get the result."
"0","  file_result <- data.frame("
"0","    participantno = participant_no,"
"0","    scenario = scenario,"
"0","    startpoint = start_point,"
"0","    "
"0","    lg_1 = trajectory_lengths[1],"
"0","    lg_2 = trajectory_lengths[2],"
"0","    lg_3 = trajectory_lengths[3],"
"0","    lg_4 = trajectory_lengths[4],"
"0","    total_length = sum(trajectory_lengths),"
"0","    "
"0","    duration_1 = trajectory_durations[1],"
"0","    duration_2 = trajectory_durations[2],"
"0","    duration_3 = trajectory_durations[3],"
"0","    duration_4 = trajectory_durations[4],"
"0","    total_duration = sum(trajectory_durations),"
"0","    "
"0","    total_speed = sum(trajectory_lengths) / sum(trajectory_durations),"
"0","    "
"0","    num_stops_1 = num_stops[1],"
"0","    num_stops_2 = num_stops[2],"
"0","    num_stops_3 = num_stops[3],"
"0","    num_stops_4 = num_stops[4],"
"0","    total_walkingstops = sum(num_stops),"
"0","    "
"0","    stops_duration_1 = trajectory_stops_durations[1],  "
"0","    stops_duration_2 = trajectory_stops_durations[2],   "
"0","    stops_duration_3 = trajectory_stops_durations[3],    "
"0","    stops_duration_4 = trajectory_stops_durations[4],"
"0","    total_walkingstop_duration = sum(trajectory_stops_durations),"
"0","    "
"0","    stringsAsFactors = FALSE"
"0","  )"
"0","  result_df <- rbind(result_df, file_result)"
"0","  }"
"2","Warning: NAs introduced by coercion"
"2","Warning: NAs introduced by coercion"
"0","# Print or use the resulting data frame"
"0","print(result_df)"
